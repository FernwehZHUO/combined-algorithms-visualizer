{"version":3,"file":"static/js/483.3300e294.chunk.js","mappings":"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","sources":["algorithms/Ford-Fulkerson-Depth-First.ts","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import {\r\n  Graph,\r\n  GraphMutation,\r\n  Node,\r\n  Edge,\r\n  GraphEdgeFlowMutation,\r\n  GraphNodeHighlightMutation,\r\n  GraphEdgeHighlightMutation\r\n} from \"../CytoscapeGraph\";\r\nimport { Algorithm } from \"../algorithm\";\r\n\r\n/** The Ford-Fulkerson algorithm using depth-first search */\r\nconst FordFulkerson: Algorithm = {\r\n  name: \"Ford-Fulkerson-Depth-First\",\r\n  linearDataStructure: \"stack\",\r\n  pseudocode: ({ sourceName, sinkName }) => String.raw`\r\n    \\begin{algorithm}\r\n    \\begin{algorithmic}\r\n    \\PROCEDURE{Ford-Fulkerson}{$G=(V,\\ E),\\ ${sourceName} \\in V,\\ ${sinkName} \\in V$}\r\n        \\STATE $f = 0$\r\n        \\REPEAT\r\n            \\STATE $p = \\left[\\ \\right]$\r\n            \\STATE $u = \\left[\\ ${sourceName}\\ \\right]$ \\COMMENT{create stack}\r\n            \\WHILE{$u_\\mathrm{height}$ > 0}\r\n                \\STATE $c =$ \\CALL{pop}{$u$}\r\n                \\FOR{edge $e$ originating from $c$}\r\n                    \\IF{$e_\\mathrm{target} \\notin p$ \\AND $e_\\mathrm{target} \\neq ${sourceName}$ \\AND $e_\\mathrm{capacity} > e_\\mathrm{flow}$}\r\n                        \\STATE $p[e_\\mathrm{target}] = e$\r\n                        \\STATE \\CALL{push}{$u$, $e_\\mathrm{target}$}\r\n                    \\ENDIF\r\n                \\ENDFOR\r\n            \\ENDWHILE\r\n            \\IF{$p[${sinkName}] \\neq \\varnothing$}\r\n                \\STATE $\\Delta f = \\infty$\r\n                \\FOR{$e \\in p$}\r\n                    \\STATE $\\Delta f = $ \\CALL{min}{$\\Delta f$, $e_\\mathrm{capacity} - e_\\mathrm{flow}$}\r\n                \\ENDFOR\r\n                \\FOR{$e \\in p$}\r\n                    \\STATE $r = e_\\mathrm{reverse}$\r\n                    \\STATE $e_\\mathrm{flow} = e_\\mathrm{flow} + \\Delta f$\r\n                    \\STATE $r_\\mathrm{flow} = r_\\mathrm{flow} - \\Delta f$\r\n                \\ENDFOR\r\n                \\STATE $f = f + \\Delta f$\r\n            \\ENDIF\r\n        \\UNTIL{$p[${sinkName}] = \\varnothing$}\r\n        \\RETURN $f$\r\n    \\ENDPROCEDURE\r\n    \\end{algorithmic}\r\n    \\end{algorithm}\r\n  `,\r\n  references: [\r\n    { label: `Ford-Fulkerson Algorithm at Brilliant.org`, url: 'https://brilliant.org/wiki/ford-fulkerson-algorithm/' },\r\n    { label: `L. R. Ford, D. R. Fulkerson: Maximal Flow Through a Network (1956)`, url: 'https://www.cambridge.org/core/services/aop-cambridge-core/content/view/5D6E55D3B06C4F7B1043BC1D82D40764/S0008414X00036890a.pdf/maximal_flow_through_a_network.pdf'}\r\n  ],\r\n  labeledBlocks: [\r\n    // { lines: [4, 14], label: \"Depth-first search\" },\r\n    // { lines: [15, 26], label: \"Increase flow along found path\" },\r\n  ],\r\n  implementation: function*(\r\n    graph: Graph\r\n  ): IterableIterator<{\r\n    highlightedLines?: number[];\r\n    linearNodes: Node[];\r\n    graphMutations?: GraphMutation[];\r\n    done?: true;\r\n  }> {\r\n    const sourceNode = graph.getSourceNode();\r\n    const sinkNode = graph.getSinkNode();\r\n\r\n    let flow = 0;\r\n    let pred: { [key: string]: Edge };\r\n\r\n    do {\r\n      const u = [sourceNode];\r\n      pred = {};\r\n\r\n      const mutationsToUndoAfterSearch = [];\r\n\r\n      yield {\r\n        highlightedLines: [4, 5],\r\n        linearNodes: u\r\n      };\r\n\r\n      while (u.length > 0 && !pred[sinkNode.getId()]) {\r\n        const highlightedEdge = pred[u[u.length - 1].getId()];\r\n        if (highlightedEdge) {\r\n          mutationsToUndoAfterSearch.push(\r\n            new GraphEdgeHighlightMutation(highlightedEdge).inverse()\r\n          );\r\n          yield {\r\n            highlightedLines: [10, 11],\r\n            linearNodes: u,\r\n            graphMutations: [new GraphEdgeHighlightMutation(highlightedEdge)]\r\n          };\r\n        }\r\n\r\n        const cur = u.pop()!;\r\n        mutationsToUndoAfterSearch.push(\r\n          new GraphNodeHighlightMutation(cur).inverse()\r\n        );\r\n        yield {\r\n          highlightedLines: [7],\r\n          linearNodes: u,\r\n          graphMutations: [new GraphNodeHighlightMutation(cur)]\r\n        };\r\n        for (let edge of cur.getOutgoingEdges()) {\r\n          if (\r\n            pred[edge.getTargetNode().getId()] === undefined &&\r\n            !edge.getTargetNode().isEqualTo(sourceNode) &&\r\n            edge.getCapacity() > edge.getFlow()\r\n          ) {\r\n            pred[edge.getTargetNode().getId()] = edge;\r\n            u.push(edge.getTargetNode());\r\n          }\r\n          yield {\r\n            highlightedLines: [10, 11],\r\n            linearNodes: u\r\n          };\r\n          if (edge.getTargetNode().isEqualTo(sinkNode)) break;\r\n        }\r\n      }\r\n      if (pred[sinkNode.getId()] !== undefined) {\r\n        let currentHighlightEdge = pred[sinkNode.getId()];\r\n        const foundPathHighlightMutations: GraphMutation[] = [];\r\n        while (currentHighlightEdge) {\r\n          foundPathHighlightMutations.push(\r\n            new GraphEdgeHighlightMutation(currentHighlightEdge),\r\n            new GraphNodeHighlightMutation(\r\n              currentHighlightEdge.getSourceNode()\r\n            ),\r\n            new GraphNodeHighlightMutation(currentHighlightEdge.getTargetNode())\r\n          );\r\n          currentHighlightEdge =\r\n            pred[currentHighlightEdge.getSourceNode().getId()];\r\n        }\r\n        const mutationsToUndoAfterUpdate = foundPathHighlightMutations\r\n          .slice()\r\n          .reverse()\r\n          .map(mutation => mutation.inverse());\r\n\r\n        yield {\r\n          highlightedLines: [16],\r\n          linearNodes: u,\r\n          graphMutations: [\r\n            ...mutationsToUndoAfterSearch,\r\n            ...foundPathHighlightMutations\r\n          ]\r\n        };\r\n\r\n        let df = Infinity;\r\n        let currentEdge = pred[sinkNode.getId()];\r\n        while (currentEdge !== undefined) {\r\n          df = Math.min(df, currentEdge.getCapacity() - currentEdge.getFlow());\r\n          currentEdge = pred[currentEdge.getSourceNode().getId()];\r\n        }\r\n\r\n        currentEdge = pred[sinkNode.getId()];\r\n        while (currentEdge !== undefined) {\r\n          const reverseCurrentEdge = currentEdge.getReverseEdge();\r\n          yield {\r\n            highlightedLines: [22, 23],\r\n            linearNodes: u,\r\n            graphMutations: [\r\n              new GraphEdgeFlowMutation(currentEdge, df),\r\n              new GraphEdgeFlowMutation(reverseCurrentEdge, -df)\r\n            ]\r\n          };\r\n          currentEdge = pred[currentEdge.getSourceNode().getId()];\r\n        }\r\n        flow = flow + df;\r\n        yield {\r\n          highlightedLines: [25],\r\n          linearNodes: u,\r\n          graphMutations: mutationsToUndoAfterUpdate\r\n        };\r\n      }\r\n    } while (pred[sinkNode.getId()] !== undefined);\r\n    yield {\r\n      highlightedLines: [28],\r\n      linearNodes: [],\r\n      done: true\r\n    };\r\n    return flow;\r\n  }\r\n};\r\n\r\nexport default FordFulkerson;\r\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["FordFulkerson","name","linearDataStructure","pseudocode","sourceName","sinkName","String","raw","references","label","url","labeledBlocks","implementation","graph","sourceNode","getSourceNode","sinkNode","getSinkNode","flow","u","pred","mutationsToUndoAfterSearch","highlightedLines","linearNodes","length","getId","highlightedEdge","push","GraphEdgeHighlightMutation","inverse","graphMutations","cur","pop","GraphNodeHighlightMutation","getOutgoingEdges","edge","undefined","getTargetNode","isEqualTo","getCapacity","getFlow","f","currentHighlightEdge","foundPathHighlightMutations","mutationsToUndoAfterUpdate","slice","reverse","map","mutation","df","Infinity","currentEdge","Math","min","reverseCurrentEdge","getReverseEdge","GraphEdgeFlowMutation","done","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","value","e","_e","TypeError","err","normalCompletion","didErr","call","step","next","_e2","_taggedTemplateLiteral","strings","Object","freeze","defineProperties"],"sourceRoot":""}